Messing about with MongoDB

--> Without an index:

db.NationalFile.find({FEATURE_CLASS:"Summit", ELEV_IN_FT:{$gte:14000}}, {FEATURE_NAME:true, ELEV_IN_FT:true, STATE_ALPHA:true}).sort({ELEV_IN_FT:-1}).explain()

{
	"cursor" : "BasicCursor",
	"nscanned" : 2183267,
	"nscannedObjects" : 2183267,
	"n" : 82,
	"scanAndOrder" : true,
	"millis" : 2322,
	"nYields" : 0,
	"nChunkSkips" : 0,
	"isMultiKey" : false,
	"indexOnly" : false,
	"indexBounds" : {
		
	}
}


--> With index:

> db.NationalFile.ensureIndex({ELEV_IN_FT:1});                                                  
<, {FEATURE_NAME:true, ELEV_IN_FT:true, STATE_ALPHA:true} ).sort( {ELEV_IN_FT : -1} ).explain();
{
	"cursor" : "BtreeCursor ELEV_IN_FT_1 reverse",
	"nscanned" : 106,
	"nscannedObjects" : 106,
	"n" : 82,
	"millis" : 352,
	"nYields" : 0,
	"nChunkSkips" : 0,
	"isMultiKey" : false,
	"indexOnly" : false,
	"indexBounds" : {
		"ELEV_IN_FT" : [
			[
				1.7976931348623157e+308,
				14000
			]
		]
	}
}

And in cache:

<ELEV_IN_FT:true, STATE_ALPHA:true} ).sort( {ELEV_IN_FT : -1} ).explain();
{
	"cursor" : "BtreeCursor ELEV_IN_FT_1 reverse",
	"nscanned" : 106,
	"nscannedObjects" : 106,
	"n" : 82,
	"millis" : 1,
	"nYields" : 0,
	"nChunkSkips" : 0,
	"isMultiKey" : false,
	"indexOnly" : false,
	"indexBounds" : {
		"ELEV_IN_FT" : [
			[
				1.7976931348623157e+308,
				14000
			]
		]
	}
}

--> Comparison with Postgis:

- First of all, getting data loaded into Postgis was rather more of a chore than I would have liked.  I couldn't use my favorite method of loading the CSV file into QGis and then exporting into a shapefile, then creating a SQL insert file using shp2pgsql.  Nope, couldn't do that because QGis blew up when I tried to load 2 million points into it.  So I ended up creating a SQL creation statement for the table, then piping a tab delimited data file int a COPY statement.  Pain in the ass.

--> works:
gnis=> \copy gnis FROM '/home/randre/gis_data/gnis/pg_load_file.csv' WITH NULL AS '' DELIMITER AS '|'

gnis=> explain analyze select feature_name, state_alpha, elev_in_ft from gnis where feature_class = 'Summit' and elev_in_ft > 14000 order by elev_in_ft desc;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Sort  (cost=68092.17..68092.18 rows=5 width=28) (actual time=699.615..699.678 rows=82 loops=1)
   Sort Key: elev_in_ft
   Sort Method:  quicksort  Memory: 31kB
   ->  Seq Scan on gnis  (cost=0.00..68092.11 rows=5 width=28) (actual time=52.386..699.382 rows=82 loops=1)
         Filter: ((elev_in_ft > 14000::numeric) AND ((feature_class)::text = 'Summit'::text))
 Total runtime: 699.782 ms
(6 rows)

With index:

 Sort  (cost=604.69..604.70 rows=5 width=28) (actual time=2.300..2.386 rows=82 loops=1)
   Sort Key: elev_in_ft
   Sort Method:  quicksort  Memory: 31kB
   ->  Bitmap Heap Scan on gnis  (cost=5.67..604.63 rows=5 width=28) (actual time=0.393..2.008 r
ows=82 loops=1)
         Recheck Cond: (elev_in_ft > 14000::numeric)
         Filter: ((feature_class)::text = 'Summit'::text)
         ->  Bitmap Index Scan on elev_idx  (cost=0.00..5.67 rows=157 width=0) (actual time=0.31
7..0.317 rows=106 loops=1)
               Index Cond: (elev_in_ft > 14000::numeric)
 Total runtime: 2.527 ms
(9 rows)

-------------------
Sunday July 3, 2011:

- Wanted to do some speed tests with mongo and seem to have lost the database I had setup previously.  Not sure how, but figure I'd better document the setup this time.

1. Create location for db to live in:
$  sudo mkdir -p /usr/local/mongodb/db
$  sudo chown `id -u` /usr/local/mongodb/db/

2. (In poking around I found my previously created db under /var/lib/mongodb. I copied all files over to location under /usr/local and ran "repair" option.)
$ mongod --dbpath /usr/local/mongodb/db/ --repair

3. Start mongo in foreground and pointed at db location:
$ mongod --dbpath /usr/local/mongodb/db/

4. Show db's:
> show dbs
admin	(empty)
gnis	3.9521484375GB
local	(empty)
test	0.203125GB

5. Switch to using 'gnis' db:
> use gnis
switched to db gnis

6. Show collections (tables):
> show collections
NationalFile
system.indexes

7. Startup mongo as daemon (after some prep work)
$ sudo mkdir /usr/local/mongodb/log
$ sudo chown `id -u` /usr/local/mongodb/log/
$ mongod --fork --dbpath /usr/local/mongodb/db/ --logpath /usr/local/mongodb/log/mongodb.log --logappend
forked process: 3018
all output going to: /usr/local/mongodb/log/mongodb.log

8. Create 'start_mongodb' alias in .bashrc:
alias start_mongodb='mongod --fork --dbpath /usr/local/mongodb/db/ --logpath /usr/local/mongodb/log/mongodb.log --logappend'

9. Shutdown server from mongo shell:
> use admin
switched to db admin
> db.shutdownServer()

----------------------
Mon July 4, 2011:

- How to execute a query from command line non-interactively:
$ time mongo gnis --eval "db.NationalFile.find().count();"

NOTE:  This works with "count", but if you actually want records, you need to iterate over the cursor.

-----------------------
Tue July 5, 2011:

- Some interesting bits today.  Installed PyMongo and made some queries.  Nice, simple syntax that follows the mongo shell query sysntax nicely.  One new thing I encountered was the 'u' indincating a unicode response.  Evidently in Python 3 the 'u' will go away, as everything will be in unicode.  Until then though, it's possible to remove it by doing the following.

  from __future__ import unicode_literals

Time to unittest this.

------------------------
Wed July 13, 2011:

- Ok, want to see what sort of request Polymaps makes when requesting JSON tiles.  Set map API to:
        .center({lat: 47.5, lon: -120.5})
        .zoomRange([0, 7])
        .zoom(7)
and pointed to a fake layer at:
        .add(po.geoJson().url("http://localhost/cgi-bin/foo/{Z}/{X}/{Y}.json").id("state"))

- Checked that apache access.log and saw the following:
"GET /cgi-bin/foo/7/19/45.json 
"GET /cgi-bin/foo/7/18/45.json
"GET /cgi-bin/foo/7/18/44.json
"GET /cgi-bin/foo/7/23/45.json
"GET /cgi-bin/foo/7/22/45.json
"GET /cgi-bin/foo/7/21/45.json
"GET /cgi-bin/foo/7/23/44.json
"GET /cgi-bin/foo/7/22/44.json
"GET /cgi-bin/foo/7/20/44.json
"GET /cgi-bin/foo/7/21/44.json
"GET /cgi-bin/foo/7/19/44.json
"GET /cgi-bin/foo/7/23/43.json
"GET /cgi-bin/foo/7/22/43.json
"GET /cgi-bin/foo/7/21/43.json
"GET /cgi-bin/foo/7/20/43.json
"GET /cgi-bin/foo/7/19/43.json
"GET /cgi-bin/foo/7/18/43.json
 
- So the key is to be able to convert those TMS addresses into Geographic bounding boxes. "What we need to do is take a layer request that contains a zoom level, an X and a Y coordinate and then somehow create a bounding box in our layerâ€™s coordinate system (SRID 4326)." - http://geojason.info/tag/polymaps/

- Python function below has the math to convert from TMS to lat/lon bbox coords

# Imports
import math


# Functions
def TileBounds(tx, ty, zoom):
	# Returns bounds of the given tile in EPSG:4326 coordinates
	
	ty = ((1 << zoom) - ty - 1)
	
	# Pixels to Meters
	# Converts pixel coordinates in given zoom level of pyramid to EPSG:900913
	originShift = 20037508.342789244
	# resolution = (meters/pixel) for given zoom level (measured at Equator)
	resolution = 156543.03392804062 / (2**zoom)
	minx_meters = ( tx * 256 ) * resolution - originShift
	miny_meters = ( ty * 256 ) * resolution - originShift
	maxx_meters = ( ( tx + 1 ) * 256 ) * resolution - originShift
	maxy_meters = ( ( ty + 1 ) * 256 ) * resolution - originShift

	# Meters to Lat/Lon
	# Converts XY point from Spherical Mercator EPSG:900913 to lat/lon in WGS84 Datum
	minx_ll = (minx_meters / originShift) * 180.0
	miny_ll = (miny_meters / originShift) * 180.0
	maxx_ll = (maxx_meters / originShift) * 180.0
	maxy_ll = (maxy_meters / originShift) * 180.0
	
	miny_ll = 180 / math.pi * (2 * math.atan( math.exp( miny_ll * math.pi / 180.0)) - math.pi / 2.0)
	maxy_ll = 180 / math.pi * (2 * math.atan( math.exp( maxy_ll * math.pi / 180.0)) - math.pi / 2.0)
	
	return Polygon(((minx_ll, miny_ll), (minx_ll, maxy_ll), (maxx_ll, maxy_ll), (maxx_ll, miny_ll),(minx_ll, miny_ll)))

- Next we need to know how to format json:
{"type":"FeatureCollection","features":[{"geometry":{"type":"Polygon","coordinates":[[[-89.137364,34.079458],[-88.830659,34.079458],[-88.721121,34.074921],[-88.721121,33.811394],[-88.934719,33.811394],[-88.934719,33.752216],[-89.038780,33.738554],[-89.192133,33.738554],[-89.192133,33.811394],[-89.137364,33.811394],[-89.137364,34.079458]]]},"type":"Feature","id":"county:28017","properties":{"name":"Chickasaw County"}},{"geometry":{"type":"Polygon","coordinates":[[[-85.999114,32.050918],[-85.895053,32.046276],[-85.884099,31.967323],[-85.790992,31.967323],[-85.790992,31.904412],[-86.185511,31.904412],[-86.190804,31.967323],[-85.993637,31.967323],[-85.999114,32.050918]]]}

--------------------------
Thu July 14, 2011:

- Made good progress on both validating the TMS-to-bbox coords, and on the json format to serve for polgons.

- Dummy cgi script to serve up some tile boundaries:
#! /usr/bin/python

# json_bbox.py

print "Content-type: text/html\n\n"

print '''{"type":"FeatureCollection",
          "features":[{"geometry":{"type":"Polygon",
                                   "coordinates":[[[-126.562500,45.089036],
                                                   [-126.562500,47.040182],
                                                   [-123.750000,47.040182],
                                                   [-123.750000,45.089036],
                                                   [-126.562500,45.089036]
                                                 ]]
                                  }
                      },
                      {"geometry":{"type":"Polygon",
                                   "coordinates":[[[-129.375000,45.089036],
                                                   [-129.375000,47.040182],
                                                   [-126.562500,47.040182],
                                                   [-126.562500,45.089036],
                                                   [-129.375000,45.089036]
                                                 ]]
                                  }
                      }
                     ]}
      '''

- Added a map layer in my polymaps html file that points to dummy cgi and voila, I see a couple squares in my map view:
        .add(po.geoJson().url("http://localhost/cgi-bin/json_bbox.py?tile={Z},{X},{Y}").id("bbox"))

--------------------------
Fri July 15, 2011:

NOTE: 1st big challenge was to figure out a CGI request syntax that would work with my rudimentary scripting skills.

- Need to write a cgi script that parses the TMS "GET" requests, ""GET /cgi-bin/json_bbox.py?tile=5,8,12".

- Have a test script that parses a request like this, "GET /cgi-bin/table_cgi.py?fname=Roger&lname=Andre". Should be able to adapt it to extract TMS values.



